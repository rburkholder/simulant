2016/02/21

todo:
- load clips into a list
- subset a clip (waveform, video)
- place subset clips into a list

2016/02/21

SceneViewCommon::{HandleMouseLeftDown, HandleMouseWheel, HandleMouseMotion, HandleLeaveWindow} are
  base wx events bound in CreateControls for each sub-view

HandleMouseLeftDown tracks mouse position on click
HandleMouseWheel generates m_signalZoomIn, m_signalZoomOut, uses mouse location
HandleMouseMotion generates m_signalMouseShift, m_signalMouseMotion, updates mouse position state
HandleMouseLeaveWindow generates m_signalMouseDeparts

SceneMgmtView connects to these events, and processes the event locally, and then calls each sub-view:
HandleMouseMotion: UpdateInteractiveCursor( x )
HandleMouseShift: UpdateMouseShift( diff, tpm.tdWinStart, tpm.tdPixelWidth )
HandleZoomIn: UpdateMouseZoomIn( x, tpm.tdWinStart, tpm.tdPixelWidth )
HandleZoomOut: UpdateMouseZoomOut( x, tpm.tdWinStart, tpm.tdPixelWidth )
HandleMouseDeparts: UpdateInteractiveCursor( x, false )  [turns cursor off]

2016/01/17
include files are in:
/usr/include/x86_64-linux-gnu/

mid 2015, debian switched from libav to ffmpeg, so:
apt-get install ffmpeg-doc ffmpeg-dbg libavcodec-dev libavformat-dev libavresample-dev libavutil-dev libpostproc-dev libswresample-dev libswscale-dev libavfilter-dev libavdevice-dev



wget https://github.com/g-truc/glm/releases/download/0.9.7.2/glm-0.9.7.2.zip
unzip glm-0.9.7.2.zip
mv glm/glm /usr/local/include


trying out http://www.openal-soft.org/
docs at http://www.openal.org/documentation/

  542  wget http://www.openal-soft.org/openal-releases/openal-soft-1.17.1.tar.bz2
  544  cd t
  552  bzip2 -d ../openal-soft-1.17.1.tar.bz2 
  555  tar xvf ../openal-soft-1.17.1.tar 
  557  cd openal-soft-1.17.1/
  561  cd build/
  571  apt-get install libpulse-dev
  572  cmake ..
  573  make
  574  ./openal-info 


2015/10/11

apt-get install libgtk-3-dev

currently wxwidgets 3.0.2

mkdir buildNormal
cd buildNormal
../configure --enable-threads --with-gtk=3 --enable-stl  --with-opengl    CXXFLAGS=-Ofast
make
sudo make install

2015/07/18
libav files (note debian is going back to ffmpeg, should i also?)
https://lists.ffmpeg.org/pipermail/libav-user/2011-September/000624.html  -=- seeking in media file
http://ffmpeg.org/pipermail/libav-user/2012-July/002491.html
https://libav.org/documentation/doxygen/master/index.html


wx_gtk3u_gl-3.1
SOIL


2015/07/11

multi-paradigm control
1) use source media, make into a set of clips like adobe premiere
     fit the clips into a timeline for playing on fixed pre-programmed sets
2) free flow:  create cues which are based seek, play, stop, loop, something like show control system
3) then mix and max combinations of the two

* key is to be able to pull out time stamps, view waveforms and media files, and coordinate the efforts
* will require various views on the data, additional serialization tasks

* media file list
* clip list
* timelines
* cue lists based upon events

2015/06/01
libraries:
libavdevice, libavffilter, libavformat, libavcodec, libavresample, libavutil, libswscale
libz, pthread, png, boost(system, thread, chrono, filesystem, serialization),
GL, wt_gtk3u_gl-3.1, GLU, SOIL, bz2, rtaudio


2015/05/23
apt-get install librtaudio4v5 librtaudio-dev


2015/05/03

https://libav.org/releases/libav-11.3.release
One specific API issue in libavformat deserves mentioning here. When using
libavcodec for decoding or encoding and libavformat for demuxing or muxing,
the standard practice was to use the stream codec context (AVStream.codec) for
actual decoding or encoding. There are multiple problems with this pattern
(the main one is that the decoder/demuxer or encoder/muxer are not necessarily
synchronized and may overwrite each other's state), so it is now strongly
discouraged and will likely be deprecated in the future. Users should instead
allocate a separate decoding or encoding context and populate it from the
demuxing codec context (or the reverse for encoding) with the
avcodec_copy_context() function.

2015/03/22

Apparently, wxWidgets requires that the first OpenGL or GLEW call be placed inside the OnPaint event handler function. 
Look for EVT_PAINT to find this function. Once I did that, the error disappeared and OpenGL worked.
http://choorucode.com/2014/07/22/segmentation-fault-at-glcreateshader-in-wxwidgets/

2015/03/15

opengl tutorial files:  https://bitbucket.org/alfonse/gltut/downloads
main site (currently offline): http://arcsynthesis.org

2015/03/xx

h.264 test media:  http://dash-mse-test.appspot.com/decoder-test.html

better:
sample working h.264 file at:
https://github.com/raspberrypi/userland/blob/master/host_applications/linux/apps/hello_pi/hello_video/test.h264

need more flexible decoding for other files.



tinylib: https://github.com/roxlu/tinylib.git
example h.264 player with tinylib and libav:  http://roxlu.com/2014/039/decoding-h264-and-yuv420p-playback

opengl tutorial:  http://www.arcsynthesis.org/gltut/index.html

=====
libav build:
git clone git://git.libav.org/libav.git
apt-get install nasm
mkdir buildNormal
#../configure --enable-libfaac --enable-libfdk-aac --enable-libopenh264 --enable-libopus --enable-libvpx --enable-nonfree
../configure --host-cppflags=-Ofast
make
make install


=====

wxWidgets

mkdir buildNormal
cd buildNormal
../configure --enable-threads --with-gtk=3 --enable-stl  --with-opengl    CXXFLAGS=-Ofast

=====
 2015/03/15

need to run the pipeline so that decode, scale, transform are computed
then special stuff can be performed on final perspective
scaling may not be needed if performed within opengl.
looks like opengl is our next stop to handle final transformations and placements within the view
